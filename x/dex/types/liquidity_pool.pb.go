// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmuni/dex/liquidity_pool.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LiquidityPool struct {
	Index       string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Token0      string `protobuf:"bytes,2,opt,name=token0,proto3" json:"token0,omitempty"`
	Token1      string `protobuf:"bytes,3,opt,name=token1,proto3" json:"token1,omitempty"`
	Amount0     uint64 `protobuf:"varint,4,opt,name=amount0,proto3" json:"amount0,omitempty"`
	Amount1     uint64 `protobuf:"varint,5,opt,name=amount1,proto3" json:"amount1,omitempty"`
	TotalShares uint64 `protobuf:"varint,6,opt,name=totalShares,proto3" json:"totalShares,omitempty"`
	K           uint64 `protobuf:"varint,7,opt,name=k,proto3" json:"k,omitempty"`
}

func (m *LiquidityPool) Reset()         { *m = LiquidityPool{} }
func (m *LiquidityPool) String() string { return proto.CompactTextString(m) }
func (*LiquidityPool) ProtoMessage()    {}
func (*LiquidityPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a64b9c074896c78, []int{0}
}
func (m *LiquidityPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityPool.Merge(m, src)
}
func (m *LiquidityPool) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityPool) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityPool.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityPool proto.InternalMessageInfo

func (m *LiquidityPool) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *LiquidityPool) GetToken0() string {
	if m != nil {
		return m.Token0
	}
	return ""
}

func (m *LiquidityPool) GetToken1() string {
	if m != nil {
		return m.Token1
	}
	return ""
}

func (m *LiquidityPool) GetAmount0() uint64 {
	if m != nil {
		return m.Amount0
	}
	return 0
}

func (m *LiquidityPool) GetAmount1() uint64 {
	if m != nil {
		return m.Amount1
	}
	return 0
}

func (m *LiquidityPool) GetTotalShares() uint64 {
	if m != nil {
		return m.TotalShares
	}
	return 0
}

func (m *LiquidityPool) GetK() uint64 {
	if m != nil {
		return m.K
	}
	return 0
}

func init() {
	proto.RegisterType((*LiquidityPool)(nil), "cosmuni.dex.LiquidityPool")
}

func init() { proto.RegisterFile("cosmuni/dex/liquidity_pool.proto", fileDescriptor_9a64b9c074896c78) }

var fileDescriptor_9a64b9c074896c78 = []byte{
	// 224 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x48, 0xce, 0x2f, 0xce,
	0x2d, 0xcd, 0xcb, 0xd4, 0x4f, 0x49, 0xad, 0xd0, 0xcf, 0xc9, 0x2c, 0x2c, 0xcd, 0x4c, 0xc9, 0x2c,
	0xa9, 0x8c, 0x2f, 0xc8, 0xcf, 0xcf, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x86, 0xaa,
	0xd0, 0x4b, 0x49, 0xad, 0x50, 0xda, 0xc9, 0xc8, 0xc5, 0xeb, 0x03, 0x53, 0x15, 0x90, 0x9f, 0x9f,
	0x23, 0x24, 0xc2, 0xc5, 0x9a, 0x99, 0x97, 0x92, 0x5a, 0x21, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19,
	0x04, 0xe1, 0x08, 0x89, 0x71, 0xb1, 0x95, 0xe4, 0x67, 0xa7, 0xe6, 0x19, 0x48, 0x30, 0x81, 0x85,
	0xa1, 0x3c, 0xb8, 0xb8, 0xa1, 0x04, 0x33, 0x92, 0xb8, 0xa1, 0x90, 0x04, 0x17, 0x7b, 0x62, 0x6e,
	0x7e, 0x69, 0x5e, 0x89, 0x81, 0x04, 0x8b, 0x02, 0xa3, 0x06, 0x4b, 0x10, 0x8c, 0x8b, 0x90, 0x31,
	0x94, 0x60, 0x45, 0x96, 0x31, 0x14, 0x52, 0xe0, 0xe2, 0x2e, 0xc9, 0x2f, 0x49, 0xcc, 0x09, 0xce,
	0x48, 0x2c, 0x4a, 0x2d, 0x96, 0x60, 0x03, 0xcb, 0x22, 0x0b, 0x09, 0xf1, 0x70, 0x31, 0x66, 0x4b,
	0xb0, 0x83, 0xc5, 0x19, 0xb3, 0x9d, 0x74, 0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1,
	0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e,
	0x21, 0x4a, 0x18, 0x16, 0x08, 0x15, 0xe0, 0x60, 0x28, 0xa9, 0x2c, 0x48, 0x2d, 0x4e, 0x62, 0x03,
	0x7b, 0xdf, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xb1, 0xf1, 0x22, 0x80, 0x22, 0x01, 0x00, 0x00,
}

func (m *LiquidityPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.K != 0 {
		i = encodeVarintLiquidityPool(dAtA, i, uint64(m.K))
		i--
		dAtA[i] = 0x38
	}
	if m.TotalShares != 0 {
		i = encodeVarintLiquidityPool(dAtA, i, uint64(m.TotalShares))
		i--
		dAtA[i] = 0x30
	}
	if m.Amount1 != 0 {
		i = encodeVarintLiquidityPool(dAtA, i, uint64(m.Amount1))
		i--
		dAtA[i] = 0x28
	}
	if m.Amount0 != 0 {
		i = encodeVarintLiquidityPool(dAtA, i, uint64(m.Amount0))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Token1) > 0 {
		i -= len(m.Token1)
		copy(dAtA[i:], m.Token1)
		i = encodeVarintLiquidityPool(dAtA, i, uint64(len(m.Token1)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Token0) > 0 {
		i -= len(m.Token0)
		copy(dAtA[i:], m.Token0)
		i = encodeVarintLiquidityPool(dAtA, i, uint64(len(m.Token0)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintLiquidityPool(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLiquidityPool(dAtA []byte, offset int, v uint64) int {
	offset -= sovLiquidityPool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LiquidityPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovLiquidityPool(uint64(l))
	}
	l = len(m.Token0)
	if l > 0 {
		n += 1 + l + sovLiquidityPool(uint64(l))
	}
	l = len(m.Token1)
	if l > 0 {
		n += 1 + l + sovLiquidityPool(uint64(l))
	}
	if m.Amount0 != 0 {
		n += 1 + sovLiquidityPool(uint64(m.Amount0))
	}
	if m.Amount1 != 0 {
		n += 1 + sovLiquidityPool(uint64(m.Amount1))
	}
	if m.TotalShares != 0 {
		n += 1 + sovLiquidityPool(uint64(m.TotalShares))
	}
	if m.K != 0 {
		n += 1 + sovLiquidityPool(uint64(m.K))
	}
	return n
}

func sovLiquidityPool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLiquidityPool(x uint64) (n int) {
	return sovLiquidityPool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LiquidityPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidityPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidityPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidityPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidityPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token0", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidityPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidityPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidityPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token0 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidityPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidityPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidityPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount0", wireType)
			}
			m.Amount0 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidityPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount0 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount1", wireType)
			}
			m.Amount1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidityPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount1 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShares", wireType)
			}
			m.TotalShares = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidityPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalShares |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field K", wireType)
			}
			m.K = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidityPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.K |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidityPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidityPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLiquidityPool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLiquidityPool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiquidityPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiquidityPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLiquidityPool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLiquidityPool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLiquidityPool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLiquidityPool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLiquidityPool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLiquidityPool = fmt.Errorf("proto: unexpected end of group")
)
